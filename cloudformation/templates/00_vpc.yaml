Description:  This template deploys a VPC

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC. (Beware of overlapping when you connect VPCs with peering connections)
    Type: String
    Default: "172.10.0.0/16"

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: "172.10.10.0/24"

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: "172.10.11.0/24"


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


# database
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
#
#  PostgresRDS:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBSubnetGroupName: !Ref SubnetGroup
#      DBSecurityGroups:
#        - !Ref DBSecurityGroup
#      AllocatedStorage: 5
#      MaxAllocatedStorage: 20
#      DBInstanceClass: db.t2.micro
#      Engine: postgres
#      MasterUsername: !Ref DBUsername
#      MasterUserPassword: !Ref DBPassword
#      Port: 2804
#      PubliclyAccessible: false
#      # comment DBSnapshotIdentifier if you don't have one
##      DBSnapshotIdentifier: arn:aws:rds:eu-central-1:987296473044:snapshot:created-db

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: "VPC"

  VpcCIDR:
    Value: !Ref VpcCIDR
    Export:
      Name: "VpcCIDR"

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: "VPCPublicSubnet1"

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: "VPCPublicSubnet2"

  SubnetGroup:
    Value: !Ref SubnetGroup
    Export:
      Name: "VPCSubnetGroup"