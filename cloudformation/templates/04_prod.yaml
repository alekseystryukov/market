Description: This template deploys Risk Mitigation Engine via AWS Lambda

Parameters:
  PublicListenerCertificateArn:
    Type: String
    Default: ""
  ImageUri:
    Type: String
    Description: "App image uri"
  AppName:
    Description: Application Name
    Type: String
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: "Market"
  EnvName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "DEV"
  SecretKey:
    Type: String
  AllowedHosts:
    Type: String
    Default: "*"
  PostgresHost:
    Type: String
  PostgresName:
    Type: String
  PostgresUser:
    Type: String
  PostgresPass:
    Type: String
  DBSecurityGroup:
    Type: String
  EmailNoReplyFrom:
    Type: String
  EmailHostUser:
    Type: String
  EmailHostPass:
    Type: String


Conditions:
  EnableSecureListener: !Not
    - !Equals
      - !Ref PublicListenerCertificateArn
      - ""

Resources:
  # LOAD BALANCER
  # security groups
  IngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with an ingress rule"
      VpcId:
        Fn::ImportValue: "VPC"
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0

  PublicAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: 'VPCPublicSubnet1'
        - Fn::ImportValue: 'VPCPublicSubnet2'
      SecurityGroups:
        - !Ref IngressSecurityGroup

  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvName}${AppName}Public"
      HealthCheckPath: /ping/
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: "VPC"

  PublicInsecureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PublicAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref PublicTargetGroup
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Forbidden"
            StatusCode: 403

  PublicInsecureListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PublicTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref AllowedHosts
      ListenerArn: !Ref PublicInsecureListener
      Priority: 1


  PublicSecureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableSecureListener
    Properties:
      LoadBalancerArn: !Ref PublicAppLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"  # this is recommended value, but not default value
      Certificates:
        - CertificateArn: !Ref PublicListenerCertificateArn
      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref PublicTargetGroup
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Forbidden"
            StatusCode: 403

  PublicSecureListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PublicTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref AllowedHosts
      ListenerArn: !Ref PublicSecureListener
      Priority: 1


#  SecureListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Condition: EnableSecureListener
#    Properties:
#      Conditions:
#        - Field: http-header
#          HttpHeaderConfig:
#            HttpHeaderName: User-Agent
#            Values:
#              - "*"
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref PublicTargetGroup
#      ListenerArn: !Ref PublicSecureListener
#      Priority: 1
#
#  InSecureListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Conditions:
#        - Field: http-header
#          HttpHeaderConfig:
#            HttpHeaderName: User-Agent
#            Values:
#              - "*"
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref PublicTargetGroup
#      ListenerArn: !Ref PublicInsecureListener
#      Priority: 1

  # create ECS resources
  # ECS cluster for all the services and tasks
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'MarketCluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  ContainerIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "container-ingress-sg"
      GroupDescription: "Security group with an ingress rule for containers"
      VpcId:
        Fn::ImportValue: 'VPC'
      SecurityGroupIngress:
        FromPort: 8000
        ToPort: 8000
        IpProtocol: tcp
        CidrIp:
          Fn::ImportValue: 'VpcCIDR'  # container can be accessed by Load Balancer

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: # download image & put logs permissions
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub "${EnvName}${AppName}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn  # this one needs to pull images and write logs
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn  # this one is for app actions like secrets, event bus actions, etc
      ContainerDefinitions:
        - Name: app
          Image: !Ref ImageUri
          Essential: true
          EntryPoint:
            - sh
            - -c
          Command:
            - python manage.py migrate && gunicorn --bind :8000 --workers 1 --threads 4 market.wsgi:application
          PortMappings:
            - HostPort: 8000
              ContainerPort: 8000
              Protocol: tcp
          Environment: # the same as in the lambda Environment.Variables but in a different format
            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"
            - Name: ENV_NAME
              Value: !Ref EnvName
            - Name: DEBUG
              Value: false
            - Name: ALLOWED_HOSTS
              Value: !Ref AllowedHosts
            - Name: SECRET_KEY
              Value: !Ref SecretKey
            - Name: POSTGRES_HOST
              Value: !Ref PostgresHost
            - Name: POSTGRES_NAME
              Value: !Ref PostgresName
            - Name: POSTGRES_USER
              Value: !Ref PostgresUser
            - Name: POSTGRES_PASSWORD
              Value: !Ref PostgresPass
            - Name: EMAIL_NO_REPLY_FROM
              Value: !Ref EmailNoReplyFrom
            - Name: EMAIL_HOST_USER
              Value: !Ref EmailHostUser
            - Name: EMAIL_HOST_PASSWORD
              Value: !Ref EmailHostPass
            - Name: STATIC_URL
              Value: !Sub
                 - "${BucketUrl}/${AppName}/${EnvName}/static/"
                 - BucketUrl:
                     Fn::ImportValue: 'MediaS3BucketUrl'
            - Name: S3_STATIC_BUCKET
              Value:
                Fn::ImportValue: 'MediaS3BucketName'
            - Name: S3_STATIC_BUCKET_PREFIX
              Value: !Sub "/${AppName}/${EnvName}"
            - Name: AWS_STORAGE_BUCKET_NAME
              Value:
                Fn::ImportValue: 'MediaS3BucketName'
            - Name: AWS_STORAGE_BUCKET_PREFIX
              Value: !Sub "/${AppName}/${EnvName}"
            - Name: ERROR_SNS_TOPIC
              Value:
                Fn::ImportValue: 'ErrorsEmailSNSTopicArn'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app

  ECSLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/${EnvName}/${AppName}"
      RetentionInDays: 7

  ECSService: # http requests listener service
    Type: AWS::ECS::Service
    DependsOn:
      - RoleAdditionalPermissions  # service need all the permissions to run (it runs while being created)
      - PublicInsecureListener
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 1
      PropagateTags: TASK_DEFINITION
      SchedulingStrategy: REPLICA
      ServiceName: !Sub "${EnvName}${AppName}Service"
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref PublicTargetGroup
          ContainerPort: 8000
          ContainerName: app
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: "VPCPublicSubnet1"
            - Fn::ImportValue: "VPCPublicSubnet2"
          SecurityGroups:
            - !Ref DBSecurityGroup
            - !Ref ContainerIngressSecurityGroup


  # rule and permission
  OnSuccessDeployTaskRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run django collectstatic & migrate on deploy"
      Name: !Sub "${EnvName}${AppName}Init"
      State: ENABLED
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - "CloudFormation Stack Status Change"
        detail:
          stack-id:
            - !Ref "AWS::StackId"
          status-details:
            status:
              - "CREATE_COMPLETE"
              - "UPDATE_COMPLETE"
      Targets:
        - Arn: !GetAtt Cluster.Arn
          Id: !Sub "${EnvName}${AppName}FinishDeployTask"
          RoleArn: !GetAtt EventBridgeRunTaskRole.Arn
          Input: !Sub |
            {
              "containerOverrides": [{
                "name": "app",
                "command": [
                  "python manage.py finalise_deploy"
                ]
              }]
            }
          EcsParameters:
            TaskCount: 1
            TaskDefinitionArn: !Ref ECSTaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                Subnets:
                  - Fn::ImportValue: "VPCPublicSubnet1"
                  - Fn::ImportValue: "VPCPublicSubnet2"

  EventBridgeRunTaskRole: # used for target invocation from EventBridge
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service: [ events.amazonaws.com ]
        Version: '2012-10-17'
      Policies:
        - PolicyName: !Sub "${AWS::StackName}EventTaskCallerPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - "*"
                Condition:
                  StringLike:
                    iam:PassedToService: ecs-tasks.amazonaws.com

  RoleAdditionalPermissions: # added to ExecutionRole below to evade circular links
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${EnvName}${AppName}RolePermissions"
      Roles:
        - !Ref ECSTaskExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource:
              - !GetAtt ECSLogsLogGroup.Arn
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - Fn::ImportValue: 'MediaS3BucketArn'
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:GetObject"
              - "s3:GetObjectAcl"
              - "s3:GetObjectAttributes"
            Resource:
              - !Sub
                - "${BucketArn}/${AppName}/${EnvName}/*"
                - BucketArn:
                    Fn::ImportValue: 'MediaS3BucketArn'
          - Effect: Allow
            Action:
              - "SNS:Publish"
            Resource:
              Fn::ImportValue: 'ErrorsEmailSNSTopicArn'

