"""
Django settings for market project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import logging
from pathlib import Path

from backports.zoneinfo import ZoneInfo
from market.utils import to_bool, to_list
from .secrets import unwrap_secret_to_env

logger = logging.getLogger(__name__)


unwrap_secret_to_env()

PROJECT_VERSION = '##VERSION##'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = to_bool(os.getenv('DEBUG'))  # turned off by default
ALLOWED_HOSTS = to_list(os.getenv('ALLOWED_HOSTS'))
if ALLOWED_HOSTS and "*" not in ALLOWED_HOSTS:
    CSRF_TRUSTED_ORIGINS = [f"https://{h}" for h in ALLOWED_HOSTS]
else:
    CSRF_TRUSTED_ORIGINS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.forms',  # https://docs.djangoproject.com/en/4.0/ref/forms/renderers/#templatessetting

    'django.contrib.sitemaps',
    'rest_framework',
    'drf_yasg',
    'django_extensions',
    'django_admin_inline_paginator',
    'storages',
    'django_password_validators',
    'rangefilter',
    'ckeditor',

    'apps.core',
    'apps.user',
    'apps.store',
    'apps.cart',
]

MIDDLEWARE = [
    'apps.core.middleware.ping_middleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'apps.core.middleware.request_id_middleware',
]

REST_FRAMEWORK = {
    # removed the default classes – BasicAuthentication and SessionAuthentication
    # https://www.django-rest-framework.org/api-guide/authentication/#setting-the-authentication-scheme
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_PARSER_CLASSES': [
        'apps.core.parsers.JSONParser',           # overridden
        'rest_framework.parsers.FormParser',      # by default
        'rest_framework.parsers.MultiPartParser'  # by default
    ],
}

ROOT_URLCONF = 'market.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'apps.core.context_processors.project_name',
                'apps.core.context_processors.project_settings',

                'apps.cart.context_processors.cart_counter',
            ],
            'builtins': ['apps.core.templatetags.common']
        },
    },
]

# Overridden for storing custom widgets templates in |BASE_DIR / 'templates'| folder, not in Django apps |'templates'|
FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

WSGI_APPLICATION = 'market.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
   "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.getenv('POSTGRES_HOST', "db"),
        "PORT": int(os.getenv('POSTGRES_PORT', 5432)),
        "NAME": os.getenv('POSTGRES_NAME', "postgres"),
        "USER": os.getenv('POSTGRES_USER', "postgres"),
        "PASSWORD": os.getenv('POSTGRES_PASSWORD', "postgres"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8
        }
    },
    {
        'NAME': 'django_password_validators.password_character_requirements.password_validation.PasswordCharacterValidator',
        'OPTIONS': {
            'min_length_digit': 1,
            'min_length_special': 1,
            'min_length_lower': 1,
            'min_length_upper': 1,
            'special_characters': "~!@#$%^&*()_+{}\":;'[]"
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'uk'

TIME_ZONE = os.getenv('TIME_ZONE', 'Europe/Kiev')

# It's a time zone that is used for 'StartTime' in 'RemittanceAvailabilityRequestSerializer' and in tests.
# Maybe need to remote this setting and to use 'TIME_ZONE'
INTERNAL_DEFAULT_TIME_ZONE_NAME = os.getenv('INTERNAL_DEFAULT_TIME_ZONE_NAME', TIME_ZONE)
INTERNAL_DEFAULT_TIME_ZONE = ZoneInfo(INTERNAL_DEFAULT_TIME_ZONE_NAME)

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', 'static/')
STATIC_ROOT = os.getenv('STATIC_ROOT', 'static_dir')
STATICFILES_DIRS = (BASE_DIR / 'static',)

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {  # It's not used, actually. The logic is overridden in the 'finalise_deploy' command
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# AWS Configuration
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_STORAGE_BUCKET_PREFIX = os.getenv('AWS_STORAGE_BUCKET_PREFIX').lstrip("/")

if AWS_STORAGE_BUCKET_NAME:
    STORAGES['default']['BACKEND'] = 'storages.backends.s3boto3.S3Boto3Storage'

    # To save media files as public is insecure.
    # The only way to access a private file in Browsers is generating URI with the authentication GET-query parameter.
    AWS_QUERYSTRING_AUTH = True
    AWS_DEFAULT_ACL = None  # None means the file will be private per Amazon’s default

    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_SIGNATURE_VERSION = 's3v4'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user.User'


if DEBUG:
    import socket

    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + ['127.0.0.1', '10.0.2.2']


# INFO logs required to capture log events and metric
# can be increased to ERROR on dev environments to save us from the global warming
LOGGER_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {"()": 'market.logging.FormatterJSON'},
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'market.logging.SNSEmailHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {  # django, django.request, django.server must be redefined, otherwise they log their text by default
            'handlers': ['console', 'mail_admins'],
            'level': LOGGER_LEVEL,
        },
        'django.request': {  # this is for access logs and unhandled exceptions
            'handlers': ['console', 'mail_admins'],
            'level': LOGGER_LEVEL,
            'propagate': False,
        },
        'django.server': {  # this is for local use only, I expect
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        '': {  # default handler
            'handlers': ['console', 'mail_admins'],
            'level': LOGGER_LEVEL,
            'propagate': True
        },
    },
}
DEFAULT_EXCEPTION_REPORTER = 'apps.core.debug.JSONExceptionReporter'
DEFAULT_EXCEPTION_REPORTER_FILTER = 'apps.core.debug.JSONSafeExceptionReporterFilter'


# we use this to pass with messages to EventBus, because we have only one bus per account
PROD_ENV_NAME = 'PROD'
ENV_NAME = os.getenv('ENV_NAME', PROD_ENV_NAME).upper()
AWS_ACCOUNT = os.getenv('AWS_ACCOUNT', 'unknown')
AWS_REGION = os.getenv('AWS_REGION', 'unknown')

# Condition `not IS_PROD` can be used to provide some extra sandbox behaviour
# for integration and load tests
IS_PROD = ENV_NAME == PROD_ENV_NAME

# Amazon EventBridge events config
AWS_EVENT_SOURCE = os.getenv('AWS_EVENT_SOURCE', 'com.viamericas.rc')
AWS_EVENT_BUS_NAME = os.getenv('AWS_EVENT_BUS_NAME')

SQS_QUEUE_URL = os.getenv('SQS_QUEUE_URL')
SQS_QUEUE_ARN = os.getenv('SQS_QUEUE_ARN')
if not SQS_QUEUE_ARN:
    logging.warning("'SQS_QUEUE_ARN' is not defined. Async tasks schedules will be ignored")
SCHEDULER_RUN_TASK_ROLE_ARN = os.getenv('SCHEDULER_RUN_TASK_ROLE_ARN')
if not SCHEDULER_RUN_TASK_ROLE_ARN:
    logging.warning("'SCHEDULER_RUN_TASK_ROLE_ARN' is not defined. Async tasks schedules will be ignored")


# gmail smtp
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_NO_REPLY_FROM = os.getenv('EMAIL_NO_REPLY_FROM')
